{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGif","category","a","url","encodeURI","fetch","respuesta","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMA4CeA,EAvCK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAElB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAkBA,OACI,sBAAMC,SAbW,SAACC,GAChBA,EAAEC,iBAEAJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAQhB,SACA,uBACEO,KAAK,OACLC,MAAST,EACTU,SArBoB,SAACP,GACvBF,EAAeE,EAAEQ,OAAOF,a,+BCRnBG,EAAM,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEZC,EAFY,iDAEoCC,UAAWH,GAF/C,+DAGMI,MAAMF,GAHZ,cAGZG,EAHY,gBAIGA,EAAUC,OAJb,uBAIXC,EAJW,EAIXA,KAEDC,EAAOD,EAAKE,KAAM,SAAAC,GAAQ,IAAD,EAC3B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVxB,kBAeXM,GAfW,4CAAH,sDCANO,EAAc,SAAC,GAAoB,EAAnBJ,GAAoB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAGnC,OACI,sBAAKc,UAAU,yCAAf,UACG,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCHFO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAEnB,ECJsB,SAACA,GAEzB,MAA0Bd,mBAAS,CAC/BqB,KAAK,GACLa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAgCA,OA1BDC,qBAAU,WAETxB,EAAQC,GAAUwB,MAAK,SAAAd,GAKfY,EAAS,CACLf,KAAMG,EACNU,SAAS,SAQpB,CAACpB,IASKqB,ED9B6BI,CAAazB,GAAlCa,EAAb,EAAON,KAAea,EAAtB,EAAsBA,QAgBxB,OACJ,qCACQ,oBAAIJ,UAAU,oCAAd,SAAmDhB,IAElDoB,GAAW,mBAAGJ,UAAU,mCAAb,wBAGZ,qBAAKA,UAAU,YAAf,SAQOH,EAAOJ,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAEKA,GADCA,EAAIC,aElChBe,EAAe,WAI5B,MAAoCxC,mBAAS,CAAC,cAA9C,mBAAOyC,EAAP,KAAmB1C,EAAnB,KAII,OACI,qCACK,8CACD,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAGJ,6BAEQ0C,EAAWlB,KAAK,SAAAT,GAAQ,OACxB,cAAC,EAAD,CAAwBA,SAAWA,GAArBA,Y,MChB9B4B,IAASC,OAEL,cAAE,EAAF,IAEFC,SAASC,eAAe,W","file":"static/js/main.f6a99937.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\n\r\nconst AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');  //useState() asi es undefined\r\n    \r\n    const handleInputChange = (e) => {\r\n        setInputValue (e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n          e.preventDefault();  \r\n\r\n        if (inputValue.trim().length > 2){\r\n          setCategories(cats => [inputValue, ...cats ]);\r\n          setInputValue('');\r\n        }    \r\n\r\n        // inputValue.trim().length > 2 && setCategories(cats => [...cats, inputValue]);\r\n        // inputValue && setCategories( (category) => [...category, inputValue] ); \r\n    }\r\n\r\n    return (       \r\n        <form onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          value = {inputValue}\r\n          onChange= { handleInputChange}\r\n          /> \r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\n// PrimeraApp.propTypes = {\r\n//   saludo: PropTypes.string.isRequired\r\n// //    otra: PropTypes.number.isRequired \r\n// }\r\nexport default AddCategory;","\r\n\r\nexport const getGif = async (category) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI (category)}&limit=10&api_key=52azmV7lV1lPWDGslX9p5ESbaILkJhY9`;\r\n    const respuesta = await fetch(url);\r\n    const {data} = await respuesta.json();\r\n\r\n    const gifs = data.map ( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    // console.log(gifs);\r\n    return gifs;\r\n    \r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({id,title, url}) => {\r\n    \r\n    // console.log({id, title, url})\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n           <img src={url} alt={title}  />\r\n           <p>{title}</p>\r\n           \r\n           \r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\n// import { getGif } from '../helpers/getGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n      const {data: images,  loading } = useFetchGifs(category);\r\n     \r\n      \r\n    // const [count, setCount] = useState(0);\r\n\r\n    // const [images, setImages] = useState([])\r\n\r\n    \r\n\r\n   \r\n\r\n    // getGif();\r\n\r\n\r\n\r\n\r\n    return (\r\n<>\r\n        <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\r\n\r\n        {loading && <p className=\"animate__animated animate__flash\">Loading...</p>}\r\n\r\n        {/* {loading ? 'cargando' : 'data cargada'}  */}\r\n        <div className=\"card-grid\">\r\n            \r\n            \r\n\r\n            {/* en esta parte se puede hacer la desestructuracion de un vez sin necesidad de poner un call\r\n            back como por ejemplo map(imagen => <li key{imagen.id>{imagen.title}</li */}\r\n\r\n             {\r\n               images.map(img => (\r\n                   <GifGridItem \r\n                   key ={img.id}\r\n                    {...img} /> \r\n                   ))\r\n                   \r\n            }\r\n          \r\n          \r\n        </div> \r\n\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport {getGif} from '../helpers/getGifs'\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setState] = useState({\r\n        data:[],\r\n        loading: true\r\n    });\r\n\r\n\r\n   useEffect(() => {\r\n    \r\n    getGif( category).then(img => {\r\n        \r\n        // setTimeout(() => {\r\n\r\n            // console.log(img)\r\n            setState({\r\n                data: img,\r\n                loading: false\r\n            })\r\n        // }, 3000);\r\n        \r\n        \r\n        \r\n    })\r\n\r\n   },[category])\r\n\r\n    // setTimeout(() => {\r\n    //     setState({\r\n    //         data:[1,2,3,4,5],\r\n    //         loading: false\r\n    //     })\r\n    // }, 3000)\r\n\r\n    return state;\r\n}\r\n","import React, { useState } from 'react'\r\nimport AddCategory from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    \r\n\r\nconst [categories, setCategories] = useState(['One Punch']);\r\n   \r\n    \r\n    \r\n    return (\r\n        <>\r\n             <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories= {setCategories} />\r\n            <hr />\r\n           \r\n\r\n        <ol>\r\n            {\r\n                categories.map( category =>\r\n                <GifGrid key={category} category= {category} />              \r\n                )\r\n            }\r\n        </ol>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\n// export default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {GifExpertApp} from './GifExpertApp';\nimport './index.css';\n\n\n\n\nReactDOM.render(\n  \n    < GifExpertApp />,\n  \n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}